/**
     请你判断一个9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

     数字1-9在每一行只能出现一次。
     数字1-9在每一列只能出现一次。
     数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。（请参考示例图）


     注意：

     一个有效的数独（部分已被填充）不一定是可解的。
     只需要根据以上规则，验证已经填入的数字是否有效即可。
     空白格用'.'表示。

     输入：board =
     [["5","3",".",".","7",".",".",".","."]
     ,["6",".",".","1","9","5",".",".","."]
     ,[".","9","8",".",".",".",".","6","."]
     ,["8",".",".",".","6",".",".",".","3"]
     ,["4",".",".","8",".","3",".",".","1"]
     ,["7",".",".",".","2",".",".",".","6"]
     ,[".","6",".",".",".",".","2","8","."]
     ,[".",".",".","4","1","9",".",".","5"]
     ,[".",".",".",".","8",".",".","7","9"]]
     输出：true


    输入：board =
    [["8","3",".",".","7",".",".",".","."]
    ,["6",".",".","1","9","5",".",".","."]
    ,[".","9","8",".",".",".",".","6","."]
    ,["8",".",".",".","6",".",".",".","3"]
    ,["4",".",".","8",".","3",".",".","1"]
    ,["7",".",".",".","2",".",".",".","6"]
    ,[".","6",".",".",".",".","2","8","."]
    ,[".",".",".","4","1","9",".",".","5"]
    ,[".",".",".",".","8",".",".","7","9"]]
    输出：false
    解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。


 */
var isValidSudoku = function(board) {
    // lol 遍历。。就这样。。应为这是固定的9x9..所以遍历的复杂度为O(1),固定值
    function checkRepeat(nums) {
        const mapSet = new Set()
        for (const each of nums) {
            if (each !== '.' && (mapSet.has(each) || each < 1 || each > 9)) {
                return false
            } else {
                mapSet.add(each)
            }
        }
        return true
    }
    // 横向看一看
    let horizontol = []
    for (let i=0;i<9;i++) {
        horizontol = board[i]
        if (!checkRepeat(horizontol)) {
            return false
        }
    }
    // 竖向看一看
    let vertical = []
    for (let i=0;i<9;i++) {
        vertical = []
        for (let j=0;j<9;j++) {
            vertical.push(board[j][i])
            if (!checkRepeat(vertical)) {
                return false
            }
        }
    }
    // 九宫格看一看
    let block = []
    for (let ctrX=0; ctrX<3; ctrX++) {
        for (let ctrY=0; ctrY<3; ctrY++) {
            block = []
            for (let i=ctrX*3; i<ctrX*3+3; i++) {
                for (let j=ctrY*3; j<ctrY*3+3; j++) {
                    block.push(board[i][j])
                }
            }
            if (!checkRepeat(block)) {
                return false
            }
        }
    }
    // 如果都pass
    return true
};

let test = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]

console.log(isValidSudoku(test))
